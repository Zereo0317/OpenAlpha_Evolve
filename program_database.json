{
    "generic_shortest_path_problem_gen0_prog0": {
        "id": "generic_shortest_path_problem_gen0_prog0",
        "code": "```python\nimport heapq\n\ndef solve_shortest_paths(graph, start_node):\n    \"\"\"\n    Given a weighted, directed graph and a starting node, finds the shortest distance\n    from the starting node to all other nodes in the graph using Dijkstra's algorithm.\n\n    The graph is represented as a dictionary where keys are node identifiers,\n    and values are dictionaries representing outgoing edges (neighbor: weight).\n\n    Args:\n        graph (dict): A dictionary representing the graph.\n                      Keys are nodes, values are dictionaries of {neighbor: weight}.\n        start_node: The node from which to start calculating shortest paths.\n\n    Returns:\n        dict: A dictionary where keys are node identifiers and values are the\n              calculated shortest distances from the start node. Unreachable nodes\n              will have their distance represented as the string \"float('inf')\".\n    \"\"\"\n    all_nodes = set()\n    if start_node is not None:\n        all_nodes.add(start_node)\n\n    # Collect all nodes explicitly mentioned as keys or neighbors\n    for node, edges in graph.items():\n        all_nodes.add(node)\n        for neighbor in edges:\n            all_nodes.add(neighbor)\n\n    # Initialize distances: infinity for all nodes, 0 for the start_node\n    distances = {node: float('inf') for node in all_nodes}\n    \n    # If the start_node itself is not in all_nodes (e.g., graph is empty and start_node is not in it)\n    # this means start_node was implicitly handled by the initial `all_nodes.add(start_node)`\n    # The check `if start_node in distances` ensures we don't try to set a distance for a non-existent node.\n    # However, `all_nodes` construction guarantees `start_node` will be there.\n    distances[start_node] = 0\n\n    # Priority queue to store (distance, node) pairs, ordered by distance\n    # heapq is a min-heap, so the smallest distance is always at the top.\n    priority_queue = [(0, start_node)]\n\n    while priority_queue:\n        current_distance",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0
        },
        "generation": 0,
        "parent_id": null,
        "island_id": 0,
        "errors": [
            "SyntaxError: invalid syntax at line 1, offset 1"
        ],
        "status": "failed_evaluation",
        "created_at": 1748796428.9132428,
        "task_id": null
    },
    "generic_shortest_path_problem_gen0_prog1": {
        "id": "generic_shortest_path_problem_gen0_prog1",
        "code": "",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0,
            "highest_level_passed": -1.0
        },
        "generation": 0,
        "parent_id": null,
        "island_id": 1,
        "errors": [
            "Execution Error at Level 0 ('default_level'): Unexpected execution error: [WinError 2] \u7cfb\u7d71\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u6a94\u6848\u3002"
        ],
        "status": "failed_evaluation",
        "created_at": 1748796428.9177,
        "task_id": null
    },
    "generic_shortest_path_problem_gen0_prog2": {
        "id": "generic_shortest_path_problem_gen0_prog2",
        "code": "",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0,
            "highest_level_passed": -1.0
        },
        "generation": 0,
        "parent_id": null,
        "island_id": 2,
        "errors": [
            "Execution Error at Level 0 ('default_level'): Unexpected execution error: [WinError 2] \u7cfb\u7d71\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u6a94\u6848\u3002"
        ],
        "status": "failed_evaluation",
        "created_at": 1748796428.9232397,
        "task_id": null
    },
    "generic_shortest_path_problem_gen0_prog3": {
        "id": "generic_shortest_path_problem_gen0_prog3",
        "code": "",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0,
            "highest_level_passed": -1.0
        },
        "generation": 0,
        "parent_id": null,
        "island_id": 3,
        "errors": [
            "Execution Error at Level 0 ('default_level'): Unexpected execution error: [WinError 2] \u7cfb\u7d71\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u6a94\u6848\u3002"
        ],
        "status": "failed_evaluation",
        "created_at": 1748796428.9350526,
        "task_id": null
    },
    "generic_shortest_path_problem_gen0_prog4": {
        "id": "generic_shortest_path_problem_gen0_prog4",
        "code": "import heapq\n\ndef solve_shortest_paths(graph, start_node):\n    # 1. Identify all nodes in the graph\n    # This includes nodes explicitly in the graph's keys and nodes that are only targets of edges.\n    all_nodes = set()\n    all_nodes.add(start_node) # Ensure the start_node is always considered\n\n    for u in graph:\n        all_nodes.add(u)\n        for v in graph[u]:\n            all_nodes.add(v)\n\n    # 2. Initialize distances\n    # All nodes initially have an 'infinite' distance, except the start_node which is 0.\n    distances = {node: float('inf') for node in all_nodes}\n    distances[start_node] = 0\n\n    # 3. Priority queue (min-heap)\n    # Stores tuples of (distance, node). The node with the smallest distance is prioritized.\n    priority_queue = [(0, start_node)]\n\n    # 4. Dijkstra's Algorithm\n    while priority_queue:\n        current_dist, current_node = heapq.heappop(priority_queue)\n\n        # If we have already found a shorter path to current_node,\n        # this entry in the priority queue is outdated, so we skip it.\n        if current_dist > distances[current_node]:\n            continue\n\n        # Explore neighbors of the current_node\n        # Only proceed if current_node actually has outgoing edges defined in the graph\n        if current_node in graph:\n            for neighbor, weight in graph[current_node].items():\n                distance = current_dist + weight\n\n                # If a shorter path to the neighbor is found\n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(priority_queue, (distance, neighbor))\n    \n    return distances",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0,
            "highest_level_passed": -1.0
        },
        "generation": 0,
        "parent_id": null,
        "island_id": 3,
        "errors": [
            "Execution Error at Level 0 ('default_level'): Unexpected execution error: [WinError 2] \u7cfb\u7d71\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u6a94\u6848\u3002"
        ],
        "status": "failed_evaluation",
        "created_at": 1748796428.9396174,
        "task_id": null
    },
    "generic_shortest_path_problem_gen1_child0_0": {
        "id": "generic_shortest_path_problem_gen1_child0_0",
        "code": "def solve_shortest_paths(graph, start):\n    import heapq\n\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n\n    pq = [(0, start)]\n\n    while pq:\n        curr_dist, curr_node = heapq.heappop(pq)\n\n        if curr_dist > distances[curr_node]:\n            continue\n\n        for neighbor, weight in graph.get(curr_node, {}).items():\n            distance = curr_dist + weight\n                        if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n\n    for node in distances:\n        if distances[node] == float('inf'):\n            distances[node] = \"float('inf')\"\n\n    return distances",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0
        },
        "generation": 1,
        "parent_id": "generic_shortest_path_problem_gen0_prog0",
        "island_id": 0,
        "errors": [
            "SyntaxError: unexpected indent at line 17, offset 24"
        ],
        "status": "failed_evaluation",
        "created_at": 1748342488.4308155,
        "task_id": null
    },
    "generic_shortest_path_problem_gen1_child0_1": {
        "id": "generic_shortest_path_problem_gen1_child0_1",
        "code": "def solve_shortest_paths(graph, start):\n    import heapq\n\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n\n    pq = [(0, start)]\n\n    while pq:\n        curr_dist, curr_node = heapq.heappop(pq)\n\n        if curr_dist > distances[curr_node]:\n            continue\n\n        for neighbor, weight in graph.get(curr_node, {}).items():\n            distance = curr_dist + weight\n                        if distance < distances[neighbor]:\n                heapq.heappush(pq, (distance, neighbor))\n                distances[neighbor] = distance\n\n    for node in distances:\n        if distances[node] == float('inf'):\n            distances[node] = \"float('inf')\"\n\n    return distances",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0
        },
        "generation": 1,
        "parent_id": "generic_shortest_path_problem_gen0_prog0",
        "island_id": 0,
        "errors": [
            "SyntaxError: unexpected indent at line 17, offset 24"
        ],
        "status": "failed_evaluation",
        "created_at": 1748342488.7255383,
        "task_id": null
    },
    "generic_shortest_path_problem_gen1_child0_2": {
        "id": "generic_shortest_path_problem_gen1_child0_2",
        "code": "def solve_shortest_paths(graph, start):\n    import heapq\n\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n\n    pq = [(0, start)]\n\n    while pq:\n        curr_dist, curr_node = heapq.heappop(pq)\n\n        if curr_dist > distances[curr_node]:\n            continue\n\n        for neighbor, weight in graph.get(curr_node, {}).items():\n            distance = curr_dist + weight\n                        if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n            else:\n                heapq.heappush(pq, (distances[neighbor], neighbor))\n\n    for node in distances:\n        if distances[node] == float('inf'):\n            distances[node] = \"float('inf')\"\n\n    return distances",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0
        },
        "generation": 1,
        "parent_id": "generic_shortest_path_problem_gen0_prog0",
        "island_id": 0,
        "errors": [
            "SyntaxError: unexpected indent at line 17, offset 24"
        ],
        "status": "failed_evaluation",
        "created_at": 1748342489.0236142,
        "task_id": null
    },
    "generic_shortest_path_problem_gen1_child1_0": {
        "id": "generic_shortest_path_problem_gen1_child1_0",
        "code": "import heapq\n\ndef solve_shortest_paths(graph, start):\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    visited = set()\n    heap = [(0, start)]\n\n    while heap:\n        (curr_dist, curr_node) = heapq.heappop(heap)\n\n        if curr_node in visited:\n            continue\n\n        visited.add(curr_node)\n\n        for neighbor, weight in graph.get(curr_node, {}).items():\n            new_dist = curr_dist + weight\n                        if new_dist < distances[neighbor]:\n                distances[neighbor] = new_dist\n                heapq.heappush(heap, (new_dist, neighbor))\n\n    for node in graph:\n        if distances[node] == float('inf'):\n            distances[node] = \"float('inf')\"\n\n    return distances",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0
        },
        "generation": 1,
        "parent_id": "generic_shortest_path_problem_gen0_prog1",
        "island_id": 1,
        "errors": [
            "SyntaxError: unexpected indent at line 19, offset 24"
        ],
        "status": "failed_evaluation",
        "created_at": 1748342488.415723,
        "task_id": null
    },
    "generic_shortest_path_problem_gen1_child1_1": {
        "id": "generic_shortest_path_problem_gen1_child1_1",
        "code": "import heapq\n\ndef solve_shortest_paths(graph, start):\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    visited = set()\n    heap = [(0, start)]\n\n    while heap:\n        (curr_dist, curr_node) = heapq.heappop(heap)\n\n        if curr_node in visited:\n            continue\n\n        visited.add(curr_node)\n\n        for neighbor, weight in graph.get(curr_node, {}).items():\n            new_dist = curr_dist + weight\n                        if new_dist < distances[neighbor]:\n                distances[neighbor] = new_dist\n                heapq.heappush(heap, (new_dist, neighbor))\n            else:\n                heapq.heappush(heap, (distances[neighbor], neighbor))\n\n    for node in graph:\n        if distances[node] == float('inf'):\n            distances[node] = \"float('inf')\"\n\n    return distances",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0
        },
        "generation": 1,
        "parent_id": "generic_shortest_path_problem_gen0_prog1",
        "island_id": 1,
        "errors": [
            "SyntaxError: unexpected indent at line 19, offset 24"
        ],
        "status": "failed_evaluation",
        "created_at": 1748342489.2366982,
        "task_id": null
    },
    "generic_shortest_path_problem_gen1_child1_2": {
        "id": "generic_shortest_path_problem_gen1_child1_2",
        "code": "import heapq\n\ndef solve_shortest_paths(graph, start):\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    visited = set()\n    heap = [(0, start)]\n\n    while heap:\n        (curr_dist, curr_node) = heapq.heappop(heap)\n\n        if curr_node in visited:\n            continue\n\n        visited.add(curr_node)\n\n                for neighbor, weight in graph.get(curr_node, {}).items():\n            new_dist = curr_dist + weight\n            if new_dist < distances[neighbor]:\n                distances[neighbor] = new_dist\n                heapq.heappush(heap, (new_dist, neighbor))\n\n    for node in graph:\n        if distances[node] == float('inf'):\n            distances[node] = \"float('inf')\"\n\n    return distances",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0
        },
        "generation": 1,
        "parent_id": "generic_shortest_path_problem_gen0_prog1",
        "island_id": 1,
        "errors": [
            "SyntaxError: unexpected indent at line 17, offset 16"
        ],
        "status": "failed_evaluation",
        "created_at": 1748342489.7421393,
        "task_id": null
    },
    "generic_shortest_path_problem_gen2_child0_0": {
        "id": "generic_shortest_path_problem_gen2_child0_0",
        "code": "def solve_shortest_paths(graph, start):\n    import heapq\n\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n\n    pq = [(0, start)]\n\n    while pq:\n        curr_dist, curr_node = heapq.heappop(pq)\n\n                if curr_dist >= distances[curr_node]:\n            continue\n\n        for neighbor, weight in graph.get(curr_node, {}).items():\n            distance = curr_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n\n    for node in distances:\n        if distances[node] == float('inf'):\n                        distances[node] = float('inf')\n\n    return distances",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0
        },
        "generation": 2,
        "parent_id": "generic_shortest_path_problem_gen0_prog0",
        "island_id": 0,
        "errors": [
            "SyntaxError: unexpected indent at line 12, offset 16"
        ],
        "status": "failed_evaluation",
        "created_at": 1748342491.2883773,
        "task_id": null
    },
    "generic_shortest_path_problem_gen2_child0_2": {
        "id": "generic_shortest_path_problem_gen2_child0_2",
        "code": "def solve_shortest_paths(graph, start):\n    import heapq\n\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n\n    pq = [(0, start)]\n\n    while pq:\n        curr_dist, curr_node = heapq.heappop(pq)\n\n        if curr_dist > distances[curr_node]:\n            continue\n\n        for neighbor, weight in graph.get(curr_node, {}).items():\n            distance = curr_dist + weight\n                        if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n            else:\n                heapq.heappush(pq, (distances[neighbor], neighbor))\n\n    for node in distances:\n        if distances[node] == float('inf'):\n            distances[node] = \"float('inf')\"\n\n    return distances",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0
        },
        "generation": 2,
        "parent_id": "generic_shortest_path_problem_gen0_prog0",
        "island_id": 0,
        "errors": [
            "SyntaxError: unexpected indent at line 17, offset 24"
        ],
        "status": "failed_evaluation",
        "created_at": 1748342491.588024,
        "task_id": null
    },
    "generic_shortest_path_problem_gen2_child1_0": {
        "id": "generic_shortest_path_problem_gen2_child1_0",
        "code": "import heapq\n\ndef solve_shortest_paths(graph, start_node):\n    if not graph:\n        if start_node is None:\n            return None\n        else:\n            return {start_node: 0}\n    \n    distances = {}\n    for node in graph:\n        distances[node] = float('inf')\n        for neighbor in graph[node]:\n            if neighbor not in distances:\n                distances[neighbor] = float('inf')\n    \n    all_nodes = set(distances.keys())\n    for node in graph:\n        for neighbor in graph[node]:\n            if neighbor not in all_nodes:\n                all_nodes.add(neighbor)\n\n        \n    if start_node not in all_nodes:\n        all_nodes.add(start_node)\n\n    distances[start_node] = 0\n    pq = [(0, start_node)]  # Priority queue: (distance, node)\n\n    while pq:\n                dist, current_node = heapq.heappop(pq)\n\n        if dist > distances[current_node]:\n            continue\n\n        # Explore neighbors of the current node\n        if current_node in graph:\n            for neighbor, weight in graph[current_node].items():\n                new_dist = dist + weight\n                if new_dist < distances[neighbor]:\n                    distances[neighbor] = new_dist\n                    heapq.heappush(pq, (new_dist, neighbor))\n\n    # Ensure all nodes have a distance, including unreachable ones\n    for node in all_nodes:\n        if node not in distances:\n            distances[node] = float('inf')  # Or some other default value\n\n    return distances",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0
        },
        "generation": 2,
        "parent_id": "generic_shortest_path_problem_gen0_prog4",
        "island_id": 2,
        "errors": [
            "SyntaxError: unindent does not match any outer indentation level at line 33, offset 43"
        ],
        "status": "failed_evaluation",
        "created_at": 1748260462.465798,
        "task_id": null
    },
    "generic_shortest_path_problem_gen2_child1_1": {
        "id": "generic_shortest_path_problem_gen2_child1_1",
        "code": "import heapq\n\ndef solve_shortest_paths(graph, start):\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    visited = set()\n    heap = [(0, start)]\n\n    while heap:\n        (curr_dist, curr_node) = heapq.heappop(heap)\n\n        if curr_node in visited:\n            continue\n\n        visited.add(curr_node)\n\n        for neighbor, weight in graph.get(curr_node, {}).items():\n            new_dist = curr_dist + weight\n            if new_dist < distances[neighbor]:\n                distances[neighbor] = new_dist\n                heapq.heappush(heap, (new_dist, neighbor))\n\n    for node in graph:\n        if distances[node] == float('inf'):\n                        distances[node] = float('inf')\n\n    return distances",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0,
            "highest_level_passed": -1.0
        },
        "generation": 2,
        "parent_id": "generic_shortest_path_problem_gen0_prog1",
        "island_id": 1,
        "errors": [
            "Execution Error at Level 0 ('default_level'): Unexpected execution error: [WinError 2] \u7cfb\u7d71\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u6a94\u6848\u3002"
        ],
        "status": "failed_evaluation",
        "created_at": 1748342490.8700387,
        "task_id": null
    },
    "generic_shortest_path_problem_gen2_child1_2": {
        "id": "generic_shortest_path_problem_gen2_child1_2",
        "code": "import heapq\n\ndef solve_shortest_paths(graph, start_node):\n        distances = {}\n    all_nodes = set()\n\n    for node in graph:\n        distances[node] = float('inf')\n        all_nodes.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in distances:\n                distances[neighbor] = float('inf')\n                all_nodes.add(neighbor)\n    \n    if start_node is not None and start_node not in distances:\n        distances[start_node] = float('inf')\n        all_nodes.add(start_node)\n    elif start_node is None:\n        return {node: float('inf') for node in all_nodes} if all_nodes else {}\n    \n    distances[start_node] = 0\n    pq = [(0, start_node)]\n\n    while pq:\n        dist, current_node = heapq.heappop(pq)\n        \n        if dist > distances[current_node]:\n            continue\n\n        if current_node in graph:\n            for neighbor, weight in graph[current_node].items():\n                if distances[current_node] + weight < distances[neighbor]:\n                    distances[neighbor] = distances[current_node] + weight\n                    heapq.heappush(pq, (distances[neighbor], neighbor))\n                    \n    result = {}\n    for node in all_nodes:\n        result[node] = distances.get(node, float('inf'))\n\n    if start_node is not None and start_node not in result:\n        return None\n    \n    return result",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0
        },
        "generation": 2,
        "parent_id": "generic_shortest_path_problem_gen0_prog4",
        "island_id": 2,
        "errors": [
            "SyntaxError: unindent does not match any outer indentation level at line 5, offset 22"
        ],
        "status": "failed_evaluation",
        "created_at": 1748260463.5454998,
        "task_id": null
    },
    "generic_shortest_path_problem_gen2_child0_1": {
        "id": "generic_shortest_path_problem_gen2_child0_1",
        "code": "def solve_shortest_paths(graph, start):\n    import heapq\n\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n\n    pq = [(0, start)]\n\n    while pq:\n        curr_dist, curr_node = heapq.heappop(pq)\n\n        if curr_dist > distances[curr_node]:\n            continue\n\n        for neighbor, weight in graph.get(curr_node, {}).items():\n            distance = curr_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n\n        for node in distances:\n        if distances[node] == float('inf'):\n            distances[node] = float('inf')\n\n    return distances",
        "fitness_scores": {
            "correctness": 0.0,
            "runtime_ms": Infinity,
            "passed_tests": 0.0,
            "total_tests": 0.0
        },
        "generation": 2,
        "parent_id": "generic_shortest_path_problem_gen0_prog0",
        "island_id": 0,
        "errors": [
            "SyntaxError: expected an indented block after 'for' statement on line 21 at line 22, offset 9"
        ],
        "status": "failed_evaluation",
        "created_at": 1748342491.2983148,
        "task_id": null
    }
}